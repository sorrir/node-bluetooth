const DBus = require("@quadratclown/dbus-next");
const { EventEmitter } = require("events");

/*
 * Generated by dbus-next interface generator
 * Template: javascript-class.js.hbs
 */

// Introspection XML of org.bluez at /org/bluez/hci0
const XMLObjectData = `<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node><interface name="org.freedesktop.DBus.Introspectable"><method name="Introspect"><arg name="xml" type="s" direction="out"/>
</method></interface><interface name="org.bluez.Adapter1"><method name="StartDiscovery"></method><method name="SetDiscoveryFilter"><arg name="properties" type="a{sv}" direction="in"/>
</method><method name="StopDiscovery"></method><method name="RemoveDevice"><arg name="device" type="o" direction="in"/>
</method><method name="GetDiscoveryFilters"><arg name="filters" type="as" direction="out"/>
</method><property name="Address" type="s" access="read"></property><property name="AddressType" type="s" access="read"></property><property name="Name" type="s" access="read"></property><property name="Alias" type="s" access="readwrite"></property><property name="Class" type="u" access="read"></property><property name="Powered" type="b" access="readwrite"></property><property name="Discoverable" type="b" access="readwrite"></property><property name="DiscoverableTimeout" type="u" access="readwrite"></property><property name="Pairable" type="b" access="readwrite"></property><property name="PairableTimeout" type="u" access="readwrite"></property><property name="Discovering" type="b" access="read"></property><property name="UUIDs" type="as" access="read"></property><property name="Modalias" type="s" access="read"></property></interface><interface name="org.freedesktop.DBus.Properties"><method name="Get"><arg name="interface" type="s" direction="in"/>
<arg name="name" type="s" direction="in"/>
<arg name="value" type="v" direction="out"/>
</method><method name="Set"><arg name="interface" type="s" direction="in"/>
<arg name="name" type="s" direction="in"/>
<arg name="value" type="v" direction="in"/>
</method><method name="GetAll"><arg name="interface" type="s" direction="in"/>
<arg name="properties" type="a{sv}" direction="out"/>
</method><signal name="PropertiesChanged"><arg name="interface" type="s"/>
<arg name="changed_properties" type="a{sv}"/>
<arg name="invalidated_properties" type="as"/>
</signal>
</interface><interface name="org.bluez.GattManager1"><method name="RegisterApplication"><arg name="application" type="o" direction="in"/>
<arg name="options" type="a{sv}" direction="in"/>
</method><method name="UnregisterApplication"><arg name="application" type="o" direction="in"/>
</method></interface><interface name="org.bluez.LEAdvertisingManager1"><method name="RegisterAdvertisement"><arg name="advertisement" type="o" direction="in"/>
<arg name="options" type="a{sv}" direction="in"/>
</method><method name="UnregisterAdvertisement"><arg name="service" type="o" direction="in"/>
</method><property name="ActiveInstances" type="y" access="read"></property><property name="SupportedInstances" type="y" access="read"></property><property name="SupportedIncludes" type="as" access="read"></property><property name="SupportedSecondaryChannels" type="as" access="read"></property></interface><interface name="org.bluez.Media1"><method name="RegisterEndpoint"><arg name="endpoint" type="o" direction="in"/>
<arg name="properties" type="a{sv}" direction="in"/>
</method><method name="UnregisterEndpoint"><arg name="endpoint" type="o" direction="in"/>
</method><method name="RegisterPlayer"><arg name="player" type="o" direction="in"/>
<arg name="properties" type="a{sv}" direction="in"/>
</method><method name="UnregisterPlayer"><arg name="player" type="o" direction="in"/>
</method><method name="RegisterApplication"><arg name="application" type="o" direction="in"/>
<arg name="options" type="a{sv}" direction="in"/>
</method><method name="UnregisterApplication"><arg name="application" type="o" direction="in"/>
</method></interface><interface name="org.bluez.NetworkServer1"><method name="Register"><arg name="uuid" type="s" direction="in"/>
<arg name="bridge" type="s" direction="in"/>
</method><method name="Unregister"><arg name="uuid" type="s" direction="in"/>
</method></interface></node>`;

/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0
 * Interface: org.bluez.Adapter1
 */
export class Adapter1 extends EventEmitter {
  static Connect(bus, objectPath, xml) {
    if (!objectPath) {
      objectPath = "/org/bluez/hci0";
    }
    if (!xml) {
      xml = XMLObjectData;
    }
    return bus
      .getProxyObject("org.bluez", objectPath, xml)
      .then((obj) => new Adapter1(obj));
  }

  constructor(dbusObject) {
    super();
    this.dbusInterfaceName = "org.bluez.Adapter1";
    this.dbusObject = dbusObject;
    this.thisDBusInterface = dbusObject.getInterface("org.bluez.Adapter1");
    this.propertiesDBusInterface = dbusObject.getInterface(
      "org.freedesktop.DBus.Properties"
    );

    // forward property change events
    const forwardPropertyChange = (iface, changed, invalidated) => {
      if (iface === this.dbusInterfaceName) {
        this.emit("PropertiesChanged", iface, changed, invalidated);
      }
    };

    // forward all signals
    this.on("newListener", (event, listener) => {
      if (
        event === "PropertiesChanged" &&
        this.listenerCount("PropertiesChanged") === 0
      ) {
        this.propertiesDBusInterface.on(
          "PropertiesChanged",
          forwardPropertyChange
        );
      } else {
        this.thisDBusInterface.on(event, listener);
      }
    });
    this.on("removeListener", (event, listener) => {
      if (
        event === "PropertiesChanged" &&
        this.listenerCount("PropertiesChanged") === 0
      ) {
        this.propertiesDBusInterface.removeListener(
          "PropertiesChanged",
          forwardPropertyChange
        );
      } else {
        this.thisDBusInterface.removeListener(event, listener);
      }
    });
  }

  /***** Properties *****/

  getProperties() {
    return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
  }

  getProperty(name) {
    return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
  }

  setProperty(name, value) {
    return this.propertiesDBusInterface.Set(
      this.dbusInterfaceName,
      name,
      value
    );
  }

  //@property({ name: 'Address', signature: 's', access: ACCESS_READ })
  Address() {
    return this.propertiesDBusInterface
      .Get(this.dbusInterfaceName, "Address")
      .then((variant) => variant.value);
  }

  //@property({ name: 'AddressType', signature: 's', access: ACCESS_READ })
  AddressType() {
    return this.propertiesDBusInterface
      .Get(this.dbusInterfaceName, "AddressType")
      .then((variant) => variant.value);
  }

  //@property({ name: 'Name', signature: 's', access: ACCESS_READ })
  Name() {
    return this.propertiesDBusInterface
      .Get(this.dbusInterfaceName, "Name")
      .then((variant) => variant.value);
  }

  //@property({ name: 'Alias', signature: 's', access: ACCESS_READWRITE })
  Alias(value) {
    if (value !== undefined) {
      return this.propertiesDBusInterface.Set(
        this.dbusInterfaceName,
        "Alias",
        new DBus.Variant("s", value)
      );
    } else {
      return this.propertiesDBusInterface
        .Get(this.dbusInterfaceName, "Alias")
        .then((variant) => variant.value);
    }
  }

  //@property({ name: 'Class', signature: 'u', access: ACCESS_READ })
  Class() {
    return this.propertiesDBusInterface
      .Get(this.dbusInterfaceName, "Class")
      .then((variant) => variant.value);
  }

  //@property({ name: 'Powered', signature: 'b', access: ACCESS_READWRITE })
  Powered(value) {
    if (value !== undefined) {
      return this.propertiesDBusInterface.Set(
        this.dbusInterfaceName,
        "Powered",
        new DBus.Variant("b", value)
      );
    } else {
      return this.propertiesDBusInterface
        .Get(this.dbusInterfaceName, "Powered")
        .then((variant) => variant.value);
    }
  }

  //@property({ name: 'Discoverable', signature: 'b', access: ACCESS_READWRITE })
  Discoverable(value) {
    if (value !== undefined) {
      return this.propertiesDBusInterface.Set(
        this.dbusInterfaceName,
        "Discoverable",
        new DBus.Variant("b", value)
      );
    } else {
      return this.propertiesDBusInterface
        .Get(this.dbusInterfaceName, "Discoverable")
        .then((variant) => variant.value);
    }
  }

  //@property({ name: 'DiscoverableTimeout', signature: 'u', access: ACCESS_READWRITE })
  DiscoverableTimeout(value) {
    if (value !== undefined) {
      return this.propertiesDBusInterface.Set(
        this.dbusInterfaceName,
        "DiscoverableTimeout",
        new DBus.Variant("u", value)
      );
    } else {
      return this.propertiesDBusInterface
        .Get(this.dbusInterfaceName, "DiscoverableTimeout")
        .then((variant) => variant.value);
    }
  }

  //@property({ name: 'Pairable', signature: 'b', access: ACCESS_READWRITE })
  Pairable(value) {
    if (value !== undefined) {
      return this.propertiesDBusInterface.Set(
        this.dbusInterfaceName,
        "Pairable",
        new DBus.Variant("b", value)
      );
    } else {
      return this.propertiesDBusInterface
        .Get(this.dbusInterfaceName, "Pairable")
        .then((variant) => variant.value);
    }
  }

  //@property({ name: 'PairableTimeout', signature: 'u', access: ACCESS_READWRITE })
  PairableTimeout(value) {
    if (value !== undefined) {
      return this.propertiesDBusInterface.Set(
        this.dbusInterfaceName,
        "PairableTimeout",
        new DBus.Variant("u", value)
      );
    } else {
      return this.propertiesDBusInterface
        .Get(this.dbusInterfaceName, "PairableTimeout")
        .then((variant) => variant.value);
    }
  }

  //@property({ name: 'Discovering', signature: 'b', access: ACCESS_READ })
  Discovering() {
    return this.propertiesDBusInterface
      .Get(this.dbusInterfaceName, "Discovering")
      .then((variant) => variant.value);
  }

  //@property({ name: 'UUIDs', signature: 'as', access: ACCESS_READ })
  UUIDs() {
    return this.propertiesDBusInterface
      .Get(this.dbusInterfaceName, "UUIDs")
      .then((variant) => variant.value);
  }

  //@property({ name: 'Modalias', signature: 's', access: ACCESS_READ })
  Modalias() {
    return this.propertiesDBusInterface
      .Get(this.dbusInterfaceName, "Modalias")
      .then((variant) => variant.value);
  }

  /***** Methods *****/

  //@method({ name: 'StartDiscovery', inSignature: '', outSignature: '' })
  StartDiscovery() {
    return this.thisDBusInterface.StartDiscovery();
  }

  //@method({ name: 'SetDiscoveryFilter', inSignature: 'a{sv}', outSignature: '' })
  SetDiscoveryFilter(properties) {
    return this.thisDBusInterface.SetDiscoveryFilter(properties);
  }

  //@method({ name: 'StopDiscovery', inSignature: '', outSignature: '' })
  StopDiscovery() {
    return this.thisDBusInterface.StopDiscovery();
  }

  //@method({ name: 'RemoveDevice', inSignature: 'o', outSignature: '' })
  RemoveDevice(device) {
    return this.thisDBusInterface.RemoveDevice(device);
  }

  //@method({ name: 'GetDiscoveryFilters', inSignature: '', outSignature: 'as' })
  GetDiscoveryFilters() {
    return this.thisDBusInterface.GetDiscoveryFilters();
  }

  /***** Signals for org.bluez.Adapter1 *****/
}
