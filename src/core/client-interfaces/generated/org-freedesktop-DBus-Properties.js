const DBus = require("dbus-next");
const { EventEmitter } = require("events");

/*
 * Generated by dbus-next interface generator
 * Template: javascript-class.js.hbs
 */

/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0/*
 * Interface: org.freedesktop.DBus.Properties
 */
export class OrgfreedesktopDBusProperties extends EventEmitter {
  static Connect(bus, objectPath, xml) {
    return bus
      .getProxyObject("org.bluez", objectPath, xml)
      .then((obj) => new OrgfreedesktopDBusProperties(obj));
  }

  constructor(dbusObject) {
    super();
    this.dbusInterfaceName = "org.freedesktop.DBus.Properties";
    this.dbusObject = dbusObject;
    this.thisDBusInterface = dbusObject.getInterface(
      "org.freedesktop.DBus.Properties"
    );
    this.propertiesDBusInterface = dbusObject.getInterface(
      "org.freedesktop.DBus.Properties"
    );

    // forward property change events
    const forwardPropertyChange = (iface, changed, invalidated) => {
      if (iface === this.dbusInterfaceName) {
        this.emit("PropertiesChanged", iface, changed, invalidated);
      }
    };

    // forward all signals
    this.on("newListener", (event, listener) => {
      if (
        event === "PropertiesChanged" &&
        this.listenerCount("PropertiesChanged") === 0
      ) {
        this.propertiesDBusInterface.on(
          "PropertiesChanged",
          forwardPropertyChange
        );
      } else {
        this.thisDBusInterface.on(event, listener);
      }
    });
    this.on("removeListener", (event, listener) => {
      if (
        event === "PropertiesChanged" &&
        this.listenerCount("PropertiesChanged") === 0
      ) {
        this.propertiesDBusInterface.removeListener(
          "PropertiesChanged",
          forwardPropertyChange
        );
      } else {
        this.thisDBusInterface.removeListener(event, listener);
      }
    });
  }

  /***** Properties *****/

  getProperties() {
    return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
  }

  getProperty(name) {
    return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
  }

  setProperty(name, value) {
    return this.propertiesDBusInterface.Set(
      this.dbusInterfaceName,
      name,
      value
    );
  }

  /***** Methods *****/

  //@method({ name: 'Get', inSignature: 'ss', outSignature: 'v' })
  Get(interf, name) {
    return this.thisDBusInterface.Get(interf, name);
  }

  //@method({ name: 'Set', inSignature: 'ssv', outSignature: '' })
  Set(interf, name, value) {
    return this.thisDBusInterface.Set(interf, name, value);
  }

  //@method({ name: 'GetAll', inSignature: 's', outSignature: 'a{sv}' })
  GetAll(interf) {
    return this.thisDBusInterface.GetAll(interf);
  }

  /***** Signals for org.freedesktop.DBus.Properties *****/
  //@signal({ name: 'PropertiesChanged', signature: 'sa{sv}as' })
}
