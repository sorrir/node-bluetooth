const DBus = require('@quadratclown/dbus-next');
const { EventEmitter } = require('events');

/*
 * Generated by dbus-next interface generator
 * Template: javascript-class.js.hbs
 */


/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/
 * Interface: org.freedesktop.DBus.ObjectManager
 */
export class OrgfreedesktopDBusObjectManager extends EventEmitter {

    static Connect(bus, objectPath, xml) {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new OrgfreedesktopDBusObjectManager(obj));
    }

    constructor(dbusObject) {
        super();
        this.dbusInterfaceName = 'org.freedesktop.DBus.ObjectManager';
        this.dbusObject = dbusObject;
        this.thisDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.ObjectManager');

        // forward all signals
        this.on("newListener", (event, listener) => {
            this.thisDBusInterface.on(event, listener);
        });
        this.on("removeListener", (event, listener) => {
            this.thisDBusInterface.removeListener(event, listener);
        });
    }

    /***** Methods *****/

    //@method({ name: 'GetManagedObjects', inSignature: '', outSignature: 'a{oa{sa{sv}}}' })
    GetManagedObjects() {
        return this.thisDBusInterface.GetManagedObjects();
    }

    /***** Signals for org.freedesktop.DBus.Properties *****/
    //@signal({ name: 'InterfacesAdded', signature: 'oa{sa{sv}}' })

    //@signal({ name: 'InterfacesRemoved', signature: 'oas' })
}

